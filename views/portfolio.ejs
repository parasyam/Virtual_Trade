<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>VirtualTrade  - Portfolio</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/remixicon@4.3.0/fonts/remixicon.css" rel="stylesheet">
  <link rel="stylesheet" href="/styles/portfolio.css">

</head>

<body>
  <nav>
    <h1><a href="/">Virtual Trade</a></h1>
    <div>
      <a href="/">Home</a>
      <a href="/stock-search">Stocks</a>
      <a href="/stock/get-watchlist">Watchlist</a>
      <a href="/stock/leaderboard">Leaderboard</a>
      <a href="/user/logout">Logout</a>
    </div>
  </nav>

  <div class="container mt-5">
    <h2 class="heading">Portfolio Overview</h2>

    <% let profitLoss = presentValue - totalInvestment; %>

<div class="portfolio-overview">

  <div class="overview-item"> 
    <strong>Funds Available:</strong> ₹<%= AvaliableFunds.toFixed(0) %> 
  </div>

  <div class="overview-item"> 
    <strong>Realized Profit:</strong> ₹<%= realizedProfit.toFixed(0) %> 
  </div>

  <div class="overview-item"> 
    <strong>Total Investment:</strong> ₹<%= totalInvestment.toFixed(0) %> 
  </div>

  <div class="overview-item 
              <%= profitLoss >= 0 ? 'profit' : 'loss' %>">
    <strong>Profit/Loss:</strong> ₹<%= profitLoss.toFixed(0) %>
  </div>

</div>
   
<div class="search-box-container">
  <h4>Add Stocks </h4>
  <input type="text" class="search-box" id="searchBox" placeholder="Search for a stock..." oninput="filterStocks()">
  <div id="suggestions" class="suggestions"></div>
</div>


    
    <div class="row mt-3">
      <% if (stocks.length > 0) { %>
        <% stocks.forEach(stock => { %>
          <div class="col-md-4">
            <div class="card mb-4">
              <div class="card-body">
                <h5 class="card-title"><%= stock.symbol %></h5>
                <p class="card-text">Price: ₹<%= stock.currentPrice %></p>
                <p class="card-text">Quantity: <%= stock.quantity %></p>
                <p class="card-text">Invested: ₹<%= (stock.quantity * stock.pastPrice).toFixed(2) %></p>
                <p class="card-text">Profit/Loss: ₹<%= ((stock.currentPrice - stock.pastPrice) * stock.quantity).toFixed(2) %></p>
                <button class="sell-button" 
                  data-symbol="<%- stock.symbol %>" 
                  data-quantity="<%- stock.quantity %>" 
                  data-current-price="<%- stock.currentPrice %>" 
                  data-past-price="<%- stock.pastPrice %>">
                  Sell
                </button>
              </div>
            </div>
          </div>
        <% }) %>
      <% } else { %>
        <p>No stocks available.</p>
      <% } %>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      document.querySelectorAll(".sell-button").forEach(button => {
        button.addEventListener("click", function () {
          const stockName = this.getAttribute("data-symbol");
          const quantity = Number(this.getAttribute("data-quantity"));
          const currentPrice = Number(this.getAttribute("data-current-price"));
          const pastPrice = Number(this.getAttribute("data-past-price"));

          sellStock(stockName, quantity, currentPrice, pastPrice);
        });
      });
    });

    async function sellStock(stockName, quantity, currentPrice, pastPrice) {
      const sellQuantity = Number(prompt(`Enter quantity to sell (Max: ${quantity}):`, quantity));

      if (!sellQuantity || isNaN(sellQuantity) || sellQuantity <= 0 || sellQuantity > quantity) {
        alert("Invalid quantity.");
        return;
      }

      try {
        const response = await fetch("/stock/sell", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            stockName: stockName,
            quantityToSell: sellQuantity,
            sellPrice: currentPrice,
            buyPrice: pastPrice
          })
        });

        let data = await response.json();

        if (!response.ok) {
          alert(data.error || "Failed to sell stock.");
          return;
        }

        alert(`Stock sold successfully! New Realized Profit: ₹${data.realizedProfit}`);
        window.location.reload();
      } catch (error) {
        console.error("Error selling stock:", error);
        alert("Failed to communicate with the server.");
      }
    }

    const stocks = [
        
        { symbol: "ADANIENT", name: "Adani Enterprises" },
        { symbol: "ADANIPORTS", name: "Adani Ports" },
        { symbol: "APOLLOHOSP", name: "Apollo Hospitals" },
        { symbol: "ASIANPAINT", name: "Asian Paints" },
        { symbol: "AXISBANK", name: "Axis Bank" },
        { symbol: "BAJAJ-AUTO", name: "Bajaj Auto" },
        { symbol: "BAJFINANCE", name: "Bajaj Finance" },
        { symbol: "BAJAJFINSV", name: "Bajaj Finserv" },
        { symbol: "BPCL", name: "Bharat Petroleum" },
        { symbol: "BHARTIARTL", name: "Bharti Airtel" },
        { symbol: "BRITANNIA", name: "Britannia Industries" },
        { symbol: "CIPLA", name: "Cipla" },
        { symbol: "COALINDIA", name: "Coal India" },
        { symbol: "DIVISLAB", name: "Divis Laboratories" },
        { symbol: "DRREDDY", name: "Dr. Reddy's Laboratories" },
        { symbol: "EICHERMOT", name: "Eicher Motors" },
        { symbol: "GRASIM", name: "Grasim Industries" },
        { symbol: "HCLTECH", name: "HCL Technologies" },
        { symbol: "HDFCBANK", name: "HDFC Bank" },
        { symbol: "HDFCLIFE", name: "HDFC Life" },
        { symbol: "HEROMOTOCO", name: "Hero MotoCorp" },
        { symbol: "HINDALCO", name: "Hindalco Industries" },
        { symbol: "HINDUNILVR", name: "Hindustan Unilever" },
        { symbol: "ICICIBANK", name: "ICICI Bank" },
        { symbol: "INFY", name: "Infosys" },
        { symbol: "ITC", name: "ITC Limited" },
        { symbol: "JSWSTEEL", name: "JSW Steel" },
        { symbol: "KOTAKBANK", name: "Kotak Mahindra Bank" },
        { symbol: "LT", name: "Larsen & Toubro" },
        { symbol: "M&M", name: "Mahindra & Mahindra" },
        { symbol: "MARUTI", name: "Maruti Suzuki" },
        { symbol: "NESTLEIND", name: "Nestlé India" },
        { symbol: "NTPC", name: "NTPC Limited" },
        { symbol: "RELIANCE", name: "Reliance Industries" },
        { symbol: "SBIN", name: "State Bank of India" },
        { symbol: "TATAMOTORS", name: "Tata Motors" },
        { symbol: "TCS", name: "Tata Consultancy Services" },
        { symbol: "TECHM", name: "Tech Mahindra" },
        { symbol: "TITAN", name: "Titan Company" },
        { symbol: "ULTRACEMCO", name: "UltraTech Cement" }
    ];
    function filterStocks() {
            const input = document.getElementById('searchBox').value.toUpperCase();
            const suggestions = document.getElementById('suggestions');
            suggestions.innerHTML = "";
            if (input.length > 0) {
                const filteredStocks = stocks.filter(stock =>
                    stock.name.toUpperCase().includes(input) || stock.symbol.toUpperCase().includes(input)
                );
                filteredStocks.forEach(stock => {
                    const suggestionDiv = document.createElement('div');
                    suggestionDiv.textContent = `${stock.name} (${stock.symbol})`;
                    suggestionDiv.addEventListener('click', () => 
                    window.location.href = `/stock/${stock.symbol}`);
                    suggestions.appendChild(suggestionDiv);
                });
                suggestions.style.display = 'block';
            } else {
                suggestions.style.display = 'none';
            }
        }
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>
